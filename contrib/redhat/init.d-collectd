#!/bin/bash
#
# collectd    Startup script for the Collectd statistics gathering daemon
# chkconfig: - 99 01
# description: Collectd is a statistics gathering daemon used to collect \
#   system information ie. cpu, memory, disk, network
# processname: collectd
# config: /etc/collectd.conf
# config: /etc/sysconfig/collectd
# pidfile: /var/run/collectd.pid

# Source function library.
if [ -f /etc/init.d/functions ]; then
   . /etc/init.d/functions
fi

RETVAL=0
ARGS=""
prog="collectd"
service="collectd"
COLLECTD_HOME="__INSTALL__"
CONFIG="${COLLECTD_HOME}/etc/collectd.conf"
COLLECTD="${COLLECTD_HOME}/sbin/collectd"
COLLECTDPIDDIR="${COLLECTD_HOME}/var/run"
COLLECTDPID="$COLLECTDPIDDIR/collectd.pid"

MAXWAIT=30

if [ -r /etc/sysconfig/$service ]; then
	. /etc/sysconfig/$service
fi

#
# Load the mapr environment:
#
.  /opt/mapr/conf/env.sh

#
# Now add to LD_LIBRARY_PATH the path to libjvm.so
#
# XXX: Need to use a variable for /opt/mapr -- __xx__
#
ARCH=`uname -m`
J_ARCH=""
case "${ARCH}" in
   "x86_64") J_ARCH="amd64" ;;
   *) echo "Unknown architecture - exiting " ; exit 1 ;;
esac

# XXX: hack to workaround a bug in /opt/mapr/conf/env.sh

if [ "${JAVA_HOME##*/}" = "jre" ] ; then
	export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${JAVA_HOME}/lib/${J_ARCH}/server
else
	export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${JAVA_HOME}/jre/lib/${J_ARCH}/server
fi

if [[ ! -d $COLLECTDPIDDIR ]]; then
	mkdir -p $COLLECTDPIDDIR
fi

check_config() {
        if test ! -r "$CONFIG"; then
                return 2
        fi
        if ! $COLLECTD -t -C "$CONFIG"; then
                return 1
        fi
        return 0
}

start () {
	echo -n $"Starting collectd: "
	check_config
	rc="$?"
	if test "$rc" -ne 0; then
		RETVAL=6
		echo $"not starting due to configuration error"
		failure $"not starting $service due to configuration error"
	else
		daemon  $COLLECTD -P $COLLECTDPID -C "$CONFIG" $ARGS
		RETVAL=$?
		echo
		[ $RETVAL -eq 0 ] && touch ${COLLECTD_HOME}/var/lock/$service
	fi
}

stop () {
	echo -n $"Stopping collectd: "
	killproc -p $COLLECTDPID -d $MAXWAIT $prog
	RETVAL=$?
	echo
	[ $RETVAL -eq 0 ] && rm -f ${COLLECTD_HOME}/var/lock/$service
}

restart () {
	check_config
	rc="$?"
	if test "$rc" -ne 0; then
		RETVAL=6
		echo $"not restarting due to configuration error"
		failure $"not restarting $service due to configuration error"
	else
		stop
		start
	fi
}

# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  status)
	status -p $COLLECTDPID $prog
	;;
  restart|reload)
	restart
	;;
  condrestart)
	[ -f ${COLLECTD_HOME}/var/lock/$service ] && restart || :
	;;
  *)
	echo $"Usage: $0 {start|stop|status|restart|reload|condrestart}"
	exit 1
esac

exit $?

# vim:syntax=sh
